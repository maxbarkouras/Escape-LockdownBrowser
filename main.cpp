#include <windows.h>
#include <stdio.h>

unsigned char buf[] = {
  0x89, 0xca, 0x55, 0x89, 0xe5, 0x83, 0xec, 0x1c, 0x31, 0xc0, 0x89, 0x45,
  0xfc, 0x89, 0x45, 0xf8, 0x89, 0x45, 0xf4, 0x89, 0x45, 0xf0, 0x89, 0x45,
  0xec, 0x89, 0x45, 0xe8, 0x89, 0x45, 0xe4, 0x68, 0x64, 0x6c, 0x65, 0x41,
  0x68, 0x65, 0x48, 0x61, 0x6e, 0x68, 0x6f, 0x64, 0x75, 0x6c, 0x68, 0x47,
  0x65, 0x74, 0x4d, 0x89, 0x65, 0xec, 0x31, 0xdb, 0xb3, 0x30, 0x64, 0x8b,
  0x03, 0x8b, 0x40, 0x0c, 0x8b, 0x40, 0x14, 0x89, 0xc3, 0x8b, 0x03, 0x89,
  0xc3, 0x8b, 0x03, 0x8b, 0x40, 0x10, 0x89, 0xc3, 0x8b, 0x43, 0x3c, 0x01,
  0xd8, 0x8b, 0x40, 0x78, 0x01, 0xd8, 0x8b, 0x48, 0x14, 0x89, 0x4d, 0xfc,
  0x8b, 0x48, 0x1c, 0x01, 0xd9, 0x89, 0x4d, 0xf8, 0x8b, 0x48, 0x20, 0x01,
  0xd9, 0x89, 0x4d, 0xf4, 0x8b, 0x48, 0x24, 0x01, 0xd9, 0x89, 0x4d, 0xf0,
  0x31, 0xc0, 0x31, 0xc9, 0x8b, 0x75, 0xec, 0x8b, 0x7d, 0xf4, 0xfc, 0x8b,
  0x3c, 0x87, 0x01, 0xdf, 0xb1, 0x10, 0xf3, 0xa6, 0x74, 0x06, 0x40, 0x3b,
  0x45, 0xfc, 0x75, 0xe8, 0x8b, 0x4d, 0xf0, 0x8b, 0x7d, 0xf8, 0x66, 0x8b,
  0x04, 0x41, 0x8b, 0x04, 0x87, 0x01, 0xd8, 0x31, 0xdb, 0x53, 0xbb, 0xff,
  0x64, 0x6c, 0x6c, 0xc1, 0xeb, 0x08, 0x53, 0x68, 0x73, 0x65, 0x72, 0x2e,
  0x68, 0x42, 0x72, 0x6f, 0x77, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x68, 0x4c,
  0x6f, 0x63, 0x6b, 0x89, 0xe1, 0x31, 0xdb, 0x51, 0xff, 0xd0, 0x83, 0xc4,
  0x04, 0x83, 0xc4, 0x1c, 0x83, 0xc4, 0x0c, 0x83, 0xc4, 0x04, 0x5d, 0x31,
  0xdb, 0x39, 0xd8, 0x75, 0x02, 0xeb, 0x1c, 0x31, 0xdb, 0x53, 0x66, 0xbb,
  0x56, 0x01, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x01, 0xda, 0x52, 0x31,
  0xd2, 0x66, 0xba, 0xc0, 0x10, 0x01, 0xc2, 0x52, 0x58, 0xff, 0xd0, 0xeb,
  0x18, 0x8b, 0x75, 0xec, 0x8b, 0x7d, 0xf4, 0xfc, 0x8b, 0x3c, 0x87, 0x01,
  0xdf, 0xb1, 0x04, 0xf3, 0xa6, 0x74, 0x08, 0x40, 0x3b, 0x45, 0xfc, 0x75,
  0xe8, 0xeb, 0x29, 0x8b, 0x4d, 0xf0, 0x8b, 0x55, 0xf8, 0x66, 0x8b, 0x04,
  0x41, 0x8b, 0x04, 0x82, 0x01, 0xd8, 0x31, 0xd2, 0x52, 0x66, 0xba, 0xe8,
  0x03, 0x52, 0x52, 0xff, 0xd0, 0x83, 0xc4, 0x04, 0x83, 0xc4, 0x1c, 0x83,
  0xc4, 0x0c, 0x83, 0xc4, 0x04, 0x5d, 0xeb, 0x35, 0xeb, 0x33, 0x55, 0x89,
  0xe5, 0x50, 0xb8, 0x25, 0x40, 0xe1, 0xff, 0xc1, 0xe0, 0x08, 0x50, 0x31,
  0xdb, 0xb3, 0x10, 0xc1, 0xe3, 0x18, 0x66, 0xbb, 0xc0, 0x10, 0x53, 0x58,
  0xff, 0xd0, 0x31, 0xdb, 0x66, 0xbb, 0xf4, 0x01, 0x53, 0xbb, 0x3c, 0xd2,
  0xbf, 0xff, 0xc1, 0xe3, 0x08, 0x8b, 0x03, 0xff, 0xd0, 0x58, 0x89, 0xec,
  0x5d, 0x31, 0xc0, 0x31, 0xdb, 0x31, 0xc9, 0x31, 0xd2, 0x55, 0x89, 0xe5,
  0x83, 0xec, 0x1c, 0x31, 0xc0, 0x89, 0x45, 0xfc, 0x89, 0x45, 0xf8, 0x89,
  0x45, 0xf4, 0x89, 0x45, 0xf0, 0x89, 0x45, 0xec, 0x89, 0x45, 0xe8, 0x89,
  0x45, 0xe4, 0xba, 0xff, 0xff, 0x61, 0x64, 0xc1, 0xea, 0x08, 0xc1, 0xea,
  0x08, 0x52, 0x68, 0x54, 0x68, 0x72, 0x65, 0x68, 0x45, 0x78, 0x69, 0x74,
  0x89, 0x65, 0xec, 0x31, 0xdb, 0xb3, 0x30, 0x64, 0x8b, 0x03, 0x8b, 0x40,
  0x0c, 0x8b, 0x40, 0x14, 0x89, 0xc3, 0x8b, 0x03, 0x89, 0xc3, 0x8b, 0x03,
  0x8b, 0x40, 0x10, 0x89, 0xc3, 0x89, 0xc2, 0x8b, 0x43, 0x3c, 0x01, 0xd8,
  0x8b, 0x40, 0x78, 0x01, 0xd8, 0x8b, 0x48, 0x14, 0x89, 0x4d, 0xfc, 0x8b,
  0x48, 0x1c, 0x01, 0xd9, 0x89, 0x4d, 0xf8, 0x8b, 0x48, 0x20, 0x01, 0xd9,
  0x89, 0x4d, 0xf4, 0x8b, 0x48, 0x24, 0x01, 0xd9, 0x89, 0x4d, 0xf0, 0x31,
  0xc0, 0x31, 0xc9, 0x8b, 0x75, 0xec, 0x8b, 0x7d, 0xf4, 0xfc, 0x8b, 0x3c,
  0x87, 0x01, 0xdf, 0xb1, 0x08, 0xf3, 0xa6, 0x74, 0x06, 0x40, 0x3b, 0x45,
  0xfc, 0x75, 0xe8, 0x8b, 0x4d, 0xf0, 0x8b, 0x55, 0xf8, 0x66, 0x8b, 0x04,
  0x41, 0x8b, 0x04, 0x82, 0x01, 0xd8, 0x31, 0xd2, 0x52, 0x31, 0xc0, 0x31,
  0xdb, 0xeb, 0xfa, 0x83, 0xe4, 0xf0, 0x31, 0xd2, 0x52, 0xff, 0xd0, 0x83,
  0xc4, 0x1c, 0x83, 0xc4, 0x0c, 0x83, 0xc4, 0x04, 0x5d, 0xc3
};

int main() {

    printf("hi\n");

    DWORD miliseconds = 20000;
    Sleep(miliseconds);

     LPCTSTR lockWinowName = L"Respondus Lockdown Browser";
     //LPCTSTR lockWinowName = L"Windows Media Player Legacy";

    HWND hwnd = FindWindowW(NULL, lockWinowName);
    if (hwnd == NULL) {
        printf("Error: Failed to find window. GetLastError: %ld\n", GetLastError());
        return 1;
    }

    DWORD pid;
    if (!GetWindowThreadProcessId(hwnd, &pid)) {
        printf("Error: Failed to get process ID. GetLastError: %ld\n", GetLastError());
        return 1;
    }

    printf("Found window, Process ID: %ld\n", pid);

    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

    LPVOID remoteMemory = VirtualAllocEx(hProcess, NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    WriteProcessMemory(hProcess, remoteMemory, buf, sizeof(buf), NULL);

    printf("Allocated memory at: 0x%p\n", remoteMemory);
    Sleep(60000);

    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, (LPTHREAD_START_ROUTINE)remoteMemory, NULL, 0, NULL);

    printf("Executed thread successfully!\n");

    WaitForSingleObject(hThread, INFINITE);

    CloseHandle(hThread);
    CloseHandle(hProcess);

    ExitProcess(1);

}